{"version":3,"file":"get-css-data.esm.min.js","sources":["../src/get-urls.js","../src/get-css.js"],"sourcesContent":["// Functions\n// =============================================================================\n/**\n * Requests one-or-more URLs and returns array of data in order specified.\n * Provides callbacks error and success callbacks for each XMLHttpRequest.\n *\n * @param {array|string} url Single URL or array of URLs to request\n * @param {object}      [options] Options object\n * @param {string}      [options.mimeType] Overrides MIME type returned by\n *                      server\n * @param {function}    [options.onBeforeSend] Callback before each request is\n *                      sent. Passes 1) the xhr object, 2) the URL, and 3) the\n *                      URL index as arguments.\n * @param {function}    [options.onSuccess] Callback on xhr success. Passes 1)\n *                      xhr response text, 2) the URL, and 3) the URL index as\n *                      arguments.\n * @param {function}    [options.onError] Callback on xhr error. Passes 1) the\n *                      xhr object, 2) the URL, 3) the URL index as arguments.\n * @param {function}    [options.onComplete] Callback after all requests have\n *                      completed. Passes 1) an array of response text for each\n *                      URL in order provided as an argument.\n */\nfunction getUrls(urls, options = {}) {\n    const settings = {\n        mimeType    : options.mimeType     || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess   : options.onSuccess    || Function.prototype,\n        onError     : options.onError      || Function.prototype,\n        onComplete  : options.onComplete   || Function.prototype\n    };\n    const urlArray = Array.isArray(urls) ? urls : [urls];\n    const urlQueue = Array.apply(null, Array(urlArray.length)).map(x => null);\n\n    // Functions (Private)\n    // -------------------------------------------------------------------------\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n\n    function onSuccess(responseText, urlIndex) {\n        const returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n\n        responseText = returnVal === false ? '' : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n\n        // Complete\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n\n    // Main\n    // -------------------------------------------------------------------------\n    urlArray.forEach((url, i) => {\n        const parser = document.createElement('a');\n\n        parser.setAttribute('href', url);\n        parser.href = parser.href;\n\n        const isCrossDomain  = parser.host !== location.host;\n        //const isSameProtocol = parser.protocol === location.protocol;\n\n        // IE 9 CORS\n        if (isCrossDomain && typeof XDomainRequest !== 'undefined') {\n            //if (isSameProtocol) {\n            const xdr = new XDomainRequest();\n\n            // Event handlers must be assigned AFTER xdr.open\n            xdr.open('GET', url);\n\n            xdr.timeout = 0; // Prevent aborts/timeouts\n            xdr.onprogress = Function.prototype; // Prevent aborts/timeouts\n            xdr.ontimeout = Function.prototype; // Prevent aborts/timeouts\n            xdr.onload = function() {\n                onSuccess(xdr.responseText, i);\n            };\n            xdr.onerror = function(err) {\n                onError(xdr, i);\n            };\n\n            // Wrap in setTimeout to fix known issues wtih XDomainRequest\n            // when sending multiple requests\n            setTimeout(function() {\n                xdr.send();\n            }, 0);\n            //}\n            //else {\n            //// eslint-disable-next-line\n            //    console.log('Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol');\n            //    onError(null, i);\n            //}\n        }\n        // Other\n        else {\n            const xhr = new XMLHttpRequest();\n\n            xhr.open('GET', url);\n\n            // overrideMimeType method not available in all browsers\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n\n            settings.onBeforeSend(xhr, url, i);\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    // Success\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    }\n                    // Error\n                    else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n\n            xhr.send();\n        }\n    });\n}\n\n\n// Export\n// =============================================================================\nexport default getUrls;\n","// Dependencies\n// =============================================================================\nimport getUrls from './get-urls';\n\n\n// Functions (Public)\n// =============================================================================\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     include: 'style,link[rel=\"stylesheet\"]', // default\n *     exclude: '[href=\"skip.css\"]',\n *     filter : /red/,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray) {\n *       // ...\n *     },\n *   });\n */\nfunction getCssData(options) {\n    const regex = {\n        // CSS comments\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        // CSS @import rules ($1: url)\n        cssImports : /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    const settings = {\n        include     : options.include      || 'style,link[rel=\"stylesheet\"]',\n        exclude     : options.exclude      || null,\n        filter      : options.filter       || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess   : options.onSuccess    || Function.prototype,\n        onError     : options.onError      || Function.prototype,\n        onComplete  : options.onComplete   || Function.prototype\n    };\n    const sourceNodes = Array.apply(null, document.querySelectorAll(settings.include)).filter(node => !matchesSelector(node, settings.exclude));\n    const cssArray    = Array.apply(null, Array(sourceNodes.length)).map(x => null);\n\n    /**\n     * Handles the onComplete() callback after verifying that all CSS has been\n     * processed.\n     */\n    function handleComplete() {\n        const isComplete = cssArray.indexOf(null) === -1;\n\n        if (isComplete) {\n            const cssText = cssArray.join('');\n\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n\n    /**\n     * Processes CSS text, updates cssArray, and triggers handleComplete()\n     * 1. Passes CSS to resolveImports\n     * 2. Triggers onError() callback for each @import error\n     * 3. Tests resolved CSS against (optional) RegEx filter\n     * 4. Triggers onSuccess() callback and accepts modified cssText as return\n     * 5. Inserts final CSS into cssArray\n     * 6. Triggers handleComplete() after processing is complete\n     *\n     * @param {string} cssText CSS text to be processed\n     * @param {number} cssIndex cssArray index to store final CSS\n     * @param {object} node CSS source <link> or <style> node\n     * @param {string} sourceUrl The URL containing the source node\n     */\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        const returnVal = settings.onSuccess(cssText, node, sourceUrl);\n\n        cssText = returnVal === false ? '' : returnVal || cssText;\n\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                // Trigger onError for each error item\n                errorData.forEach(data => settings.onError(data.xhr, node, data.url));\n\n                // Filter: Pass\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                }\n                // Filter: Fail\n                else {\n                    cssArray[cssIndex] = '';\n                }\n\n                handleComplete();\n            }\n        });\n    }\n\n    /**\n     * Parses CSS and returns an object containing @import related data.\n     *\n     * @param {any} cssText CSS text to be processed\n     * @param {any} baseUrl Base URL used to resolve relative @import URLs\n     * @param {any} [ignoreRules=[]]\n     * @returns {object}\n     */\n    function parseImportData(cssText, baseUrl, ignoreRules = []) {\n        const importData = {};\n\n        // @import rules\n        // Ex: @import \"file.css\";\n        importData.rules = (cssText\n            // Remove comments to avoid processing @import in comments\n            .replace(regex.cssComments, '')\n            // Find all @import rules\n            .match(regex.cssImports)\n            // Force empty array if no match\n            || [])\n            // Remove rules found in ignoreRules array\n            .filter(rule => ignoreRules.indexOf(rule) === -1);\n\n        // @import urls\n        // Ex: file.css\n        importData.urls = importData.rules.map(rule => rule.replace(regex.cssImports, '$1'));\n\n        // Absolute @import urls\n        // Ex: /path/to/file.css\n        importData.absoluteUrls = importData.urls.map(url => getFullUrl(url, baseUrl));\n\n        // Absolute @import rules\n        // Ex: @import \"/path/to/file.css\";\n        importData.absoluteRules = importData.rules.map((rule, i) => {\n            const oldUrl = importData.urls[i];\n            const newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n\n            return rule.replace(oldUrl, newUrl);\n        });\n\n        return importData;\n    }\n\n    /**\n     * Recursively parses CSS for @import rules, fetches data for each import\n     * URL, replaces the @rule the fetched data, then returns the resolved CSS\n     * via a callback function.\n     *\n     * @param {string}   cssText CSS text to be processed\n     * @param {object}   node CSS source <link> or <style> node\n     * @param {string}   baseUrl Base URL used to resolve relative @import URLs\n     * @param {function} callbackFn Callback function to trigger on complete.\n     *                   Passes 1) the resolves CSS and 2) an array of error\n     *                   objects as arguments.\n     */\n    function resolveImports(cssText, node, baseUrl, callbackFn, __errorData = [], __errorRules = []) {\n        const importData = parseImportData(cssText, baseUrl, __errorRules);\n\n        // Has @imports\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess(cssText, url, urlIndex) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    cssText = returnVal === false ? '' : returnVal || cssText;\n\n                    const responseImportData = parseImportData(cssText, url, __errorRules);\n\n                    // Replace relative @import rules with absolute rules\n                    responseImportData.rules.forEach((rule, i) => {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n\n                    return cssText;\n                },\n                onError(xhr, url, urlIndex) {\n                    __errorData.push({ xhr, url });\n                    __errorRules.push(importData.rules[urlIndex]);\n\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete(responseArray) {\n                    responseArray.forEach((importText, i) => {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        }\n        // No @imports\n        else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n\n    // Main\n    // -------------------------------------------------------------------------\n    if (sourceNodes.length) {\n        sourceNodes.forEach((node, i) => {\n            const linkHref = node.getAttribute('href');\n            const linkRel  = node.getAttribute('rel');\n            const isLink   = node.nodeName === 'LINK' && linkHref && linkRel && linkRel.toLowerCase() === 'stylesheet';\n            const isStyle  = node.nodeName === 'STYLE';\n\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: 'text/css',\n                    onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess(cssText, url, urlIndex) {\n                        // Convert relative linkHref to absolute url\n                        const sourceUrl = getFullUrl(linkHref, location.href);\n\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError(xhr, url, urlIndex) {\n                        cssArray[i] = '';\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            }\n            else if (isStyle) {\n                handleSuccess(node.textContent, i, node, location.href);\n            }\n            else {\n                cssArray[i] = '';\n                handleComplete();\n            }\n        });\n    }\n    else {\n        settings.onComplete('', []);\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param {any} url\n * @param {any} [base=location.href]\n * @returns\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n/**\n * Ponyfill for native Element.matches method\n *\n * @param   {object} elm The element to test\n * @param   {string} selector The CSS selector to test against\n * @returns {boolean}\n */\nfunction matchesSelector(elm, selector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    return matches.call(elm, selector);\n}\n\n\n// Export\n// =============================================================================\nexport default getCssData;\n"],"names":["getUrls","urls","options","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","length","map","xhr","urlIndex","responseText","returnVal","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","host","location","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","send","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","include","exclude","filter","sourceNodes","querySelectorAll","matchesSelector","node","cssArray","handleComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolveImports","baseUrl","callbackFn","__errorData","__errorRules","importData","parseImportData","rules","absoluteUrls","responseImportData","rule","replace","absoluteRules","push","responseArray","importText","resolvedCssText","errorData","data","test","ignoreRules","cssComments","match","cssImports","getFullUrl","oldUrl","newUrl","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call"],"mappings":";;;;;;;AAsBA,SAASA,QAAQC,OAAMC,4DACbC,YACYD,EAAQE,UAAgB,kBACxBF,EAAQG,cAAgBC,SAASC,oBACjCL,EAAQM,WAAgBF,SAASC,kBACjCL,EAAQO,SAAgBH,SAASC,qBACjCL,EAAQQ,YAAgBJ,SAASC,WAE7CI,EAAWC,MAAMC,QAAQZ,GAAQA,GAAQA,GACzCa,EAAWF,MAAMG,MAAM,KAAMH,MAAMD,EAASK,SAASC,IAAI,mBAAK,gBAI3DR,EAAQS,EAAKC,KACTV,QAAQS,EAAKP,EAASQ,GAAWA,YAGrCX,EAAUY,EAAcD,OACvBE,EAAYlB,EAASK,UAAUY,EAAcT,EAASQ,GAAWA,MAE1C,IAAdE,EAAsB,GAAKA,GAAaD,IAC9CD,GAAYC,GAGW,IAA5BN,EAASQ,QAAQ,SACRZ,WAAWI,KAMnBS,QAAQ,SAACC,EAAKC,OACbC,EAASC,SAASC,cAAc,UAE/BC,aAAa,OAAQL,KACrBM,KAAOJ,EAAOI,KAEEJ,EAAOK,OAASC,SAASD,MAID,oBAAnBE,eAAgC,KAElDC,EAAM,IAAID,iBAGZE,KAAK,MAAOX,KAEZY,QAAU,IACVC,WAAa/B,SAASC,YACtB+B,UAAYhC,SAASC,YACrBgC,OAAS,aACCL,EAAId,aAAcK,MAE5Be,QAAU,SAASC,KACXP,EAAKT,eAKN,aACHiB,QACL,OASF,KACKxB,EAAM,IAAIyB,iBAEZR,KAAK,MAAOX,GAGZrB,EAASC,UAAYc,EAAI0B,oBACrBA,iBAAiBzC,EAASC,YAGzBC,aAAaa,EAAKM,EAAKC,KAE5BoB,mBAAqB,WACE,IAAnB3B,EAAI4B,aAEe,MAAf5B,EAAI6B,SACM7B,EAAIE,aAAcK,KAIpBP,EAAKO,OAKrBiB,UC9DhB,SAASM,WAAW9C,OACV+C,eAEW,+BAEA,4EAEX9C,WACYD,EAAQgD,SAAgB,uCACxBhD,EAAQiD,SAAgB,YACxBjD,EAAQkD,QAAgB,kBACxBlD,EAAQG,cAAgBC,SAASC,oBACjCL,EAAQM,WAAgBF,SAASC,kBACjCL,EAAQO,SAAgBH,SAASC,qBACjCL,EAAQQ,YAAgBJ,SAASC,WAE7C8C,EAAczC,MAAMG,MAAM,KAAMY,SAAS2B,iBAAiBnD,EAAS+C,UAAUE,OAAO,mBAASG,gBAAgBC,EAAMrD,EAASgD,WAC5HM,EAAc7C,MAAMG,MAAM,KAAMH,MAAMyC,EAAYrC,SAASC,IAAI,mBAAK,gBAMjEyC,QAC0C,IAA5BD,EAASnC,QAAQ,MAEpB,KACNqC,EAAUF,EAASG,KAAK,MAErBlD,WAAWiD,EAASF,EAAUJ,aAkBtCQ,EAAcF,EAASG,EAAUN,EAAMO,OACtC1C,EAAYlB,EAASK,UAAUmD,EAASH,EAAMO,aA8E/CC,EAAeL,EAASH,EAAMS,EAASC,OAAYC,gEAAkBC,gEACpEC,EAAaC,EAAgBX,EAASM,EAASG,GAGjDC,EAAWE,MAAMvD,eACTqD,EAAWG,oCACFtD,EAAKM,EAAKL,KACVd,aAAaa,EAAKsC,EAAMhC,uBAE3BmC,EAASnC,EAAKL,OACdE,EAAYlB,EAASK,UAAUmD,EAASH,EAAMhC,GAI9CiD,EAAqBH,KAFH,IAAdjD,EAAsB,GAAKA,GAAasC,EAEEnC,EAAK4C,YAGtCG,MAAMhD,QAAQ,SAACmD,EAAMjD,KAC1BkC,EAAQgB,QAAQD,EAAMD,EAAmBG,cAAcnD,MAG9DkC,oBAEHzC,EAAKM,EAAKL,KACF0D,MAAO3D,MAAKM,UACXqD,KAAKR,EAAWE,MAAMpD,MAEpBwC,EAASH,EAAMS,EAASC,EAAYC,EAAaC,wBAEzDU,KACOvD,QAAQ,SAACwD,EAAYtD,KACrBkC,EAAQgB,QAAQN,EAAWE,MAAM9C,GAAIsD,OAGpCpB,EAASH,EAAMS,EAASC,EAAYC,EAAaC,QAM7DT,EAASQ,QApHA,IAAd9C,EAAsB,GAAKA,GAAasC,EAE1BH,EAAMO,EAAW,SAASiB,EAAiBC,GACpC,OAAvBxB,EAASK,OAECvC,QAAQ,mBAAQpB,EAASM,QAAQyE,EAAKhE,IAAKsC,EAAM0B,EAAK1D,QAG3DrB,EAASiD,QAAUjD,EAASiD,OAAO+B,KAAKH,KAChClB,GAAYkB,IAIZlB,GAAY,mBAgB5BQ,EAAgBX,EAASM,OAASmB,4DACjCf,cAIKE,OAASZ,EAEfgB,QAAQ1B,EAAMoC,YAAa,IAE3BC,MAAMrC,EAAMsC,wBAIL,mBAAuC,IAA/BH,EAAY9D,QAAQoD,OAI7BzE,KAAOoE,EAAWE,MAAMtD,IAAI,mBAAQyD,EAAKC,QAAQ1B,EAAMsC,WAAY,UAInEf,aAAeH,EAAWpE,KAAKgB,IAAI,mBAAOuE,WAAWhE,EAAKyC,OAI1DW,cAAgBP,EAAWE,MAAMtD,IAAI,SAACyD,EAAMjD,OAC7CgE,EAASpB,EAAWpE,KAAKwB,GACzBiE,EAASF,WAAWnB,EAAWG,aAAa/C,GAAIwC,UAE/CS,EAAKC,QAAQc,EAAQC,KAGzBrB,EA6DPhB,EAAYrC,SACAO,QAAQ,SAACiC,EAAM/B,OACjBkE,EAAWnC,EAAKoC,aAAa,QAC7BC,EAAWrC,EAAKoC,aAAa,OAC7BE,EAA6B,SAAlBtC,EAAKuC,UAAuBJ,GAAYE,GAAqC,eAA1BA,EAAQG,cACtEC,EAA6B,UAAlBzC,EAAKuC,SAElBD,UACQH,YACM,iCACGzE,EAAKM,EAAKL,KACVd,aAAaa,EAAKsC,EAAMhC,uBAE3BmC,EAASnC,EAAKL,OAEd4C,EAAYyB,WAAWG,EAAU3D,SAASF,QAElC6B,EAASlC,EAAG+B,EAAMO,qBAE5B7C,EAAKM,EAAKL,KACLM,GAAK,KACLhB,QAAQS,EAAKsC,EAAMhC,UAK/ByE,IACSzC,EAAK0C,YAAazE,EAAG+B,EAAMxB,SAASF,SAGzCL,GAAK,YAMbf,WAAW,OAc5B,SAAS8E,WAAWhE,OAAK2E,yDAAOnE,SAASF,KAC/BsE,EAAIzE,SAAS0E,eAAeC,mBAAmB,IAC/CC,EAAIH,EAAExE,cAAc,QACpB4E,EAAIJ,EAAExE,cAAc,cAExB6E,KAAKC,YAAYH,KACjBI,KAAKD,YAAYF,KACjB1E,KAAOqE,IACPrE,KAAON,EAEFgF,EAAE1E,KAUb,SAASyB,gBAAgBqD,EAAKC,UAEVD,EAAIE,SAAWF,EAAIrD,iBAAmBqD,EAAIG,uBAAyBH,EAAII,oBAAsBJ,EAAIK,mBAAqBL,EAAIM,kBAE3HC,KAAKP,EAAKC"}